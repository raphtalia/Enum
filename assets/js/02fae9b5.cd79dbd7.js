"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return E}});var r=t(67294);function u(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){u(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,u=function(e,n){if(null==e)return{};var t,r,u={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(u[t]=e[t]);return u}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(u[t]=e[t])}return u}var o=r.createContext({}),l=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(o.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},c=r.forwardRef((function(e,n){var t=e.components,u=e.mdxType,a=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(t),E=u,d=c["".concat(o,".").concat(E)]||c[E]||s[E]||a;return t?r.createElement(d,m(m({ref:n},p),{},{components:t})):r.createElement(d,m({ref:n},p))}));function E(e,n){var t=arguments,u=n&&n.mdxType;if("string"==typeof e||u){var a=t.length,m=new Array(a);m[0]=c;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i.mdxType="string"==typeof e?e:u,m[1]=i;for(var l=2;l<a;l++)m[l]=t[l];return r.createElement.apply(null,m)}return r.createElement.apply(null,t)}c.displayName="MDXCreateElement"},76647:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return p},default:function(){return c}});var r=t(87462),u=t(63366),a=(t(67294),t(3905)),m=["components"],i={},o="Enum",l={type:"mdx",permalink:"/Enum/",source:"@site/pages/index.md"},p=[{value:"API",id:"api",children:[]},{value:"Examples",id:"examples",children:[]}],s={toc:p};function c(e){var n=e.components,t=(0,u.Z)(e,m);return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"enum"},"Enum"),(0,a.kt)("p",null,"Roblox Lua Enum library for supporting custom Enum types. Much of the API is\nbased off of ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/buildthomas/EnumExtender"},"EnumExtender"),". The\nkey difference between this library and ExumExtender is values of EnumItems\ncan be assigned to anything rather than being limited to numbers."),(0,a.kt)("p",null,"Enums created under the same name will overwrite previous Enums. Custom Enums\ntake priority over Roblox Enums."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Enums",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Enums.new(enumName: ",(0,a.kt)("inlineCode",{parentName:"li"},"string"),", enumItems: ",(0,a.kt)("inlineCode",{parentName:"li"},"List|Dictionary"),"): ",(0,a.kt)("inlineCode",{parentName:"li"},"Enum")),(0,a.kt)("li",{parentName:"ul"},"Enums:GetStandardEnums(): ",(0,a.kt)("inlineCode",{parentName:"li"},"Enums")),(0,a.kt)("li",{parentName:"ul"},"Enums:FromValue(enumName: ",(0,a.kt)("inlineCode",{parentName:"li"},"string"),", enumValue: ",(0,a.kt)("inlineCode",{parentName:"li"},"any"),"): ",(0,a.kt)("inlineCode",{parentName:"li"},"EnumItem")),(0,a.kt)("li",{parentName:"ul"},"Enums:Find(enumName: ",(0,a.kt)("inlineCode",{parentName:"li"},"string"),"): ",(0,a.kt)("inlineCode",{parentName:"li"},"Enum")))),(0,a.kt)("li",{parentName:"ul"},"Enum",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Enums:GetEnumItems(): ",(0,a.kt)("inlineCode",{parentName:"li"},"{EnumItem}")))),(0,a.kt)("li",{parentName:"ul"},"EnumItem",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"string"),"Name"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"any"),"Value"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Enum"),"EnumType")))),(0,a.kt)("h2",{id:"examples"},"Examples"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Enum = require(script.Parent.Enum)\n\nprint(Enum) --\x3e Enums\nprint(Enum.KeyCode) --\x3e KeyCode\nprint(Enum.KeyCode.W) --\x3e Enum.KeyCode.W\nprint(Enum.KeyCode.W.Name) --\x3e W\nprint(Enum.KeyCode.W.Value) --\x3e 119\nprint(Enum.KeyCode.W.EnumType) --\x3e KeyCode\n\nlocal TestEnum = Enum.new(\n    "TestEnum",\n    {\n        Foo = 0,\n        Bar = 1,\n    }\n)\nprint(Enum.TestEnum == TestEnum) --\x3e true\n\nprint(Enum.TestEnum) --\x3e TestEnum\nprint(Enum.TestEnum.Foo) --\x3e Enum.TestEnum.Foo\nprint(Enum.TestEnum.Foo.Name) --\x3e Foo\nprint(Enum.TestEnum.Foo.Value) --\x3e 0 \nprint(Enum.TestEnum.Foo.EnumType) --\x3e TestEnum\n\nprint(Enum.TestEnum.Bar) --\x3e Enum.TestEnum.Bar\nprint(Enum.TestEnum.Bar.Name) --\x3e Bar\nprint(Enum.TestEnum.Bar.Value) --\x3e 1\nprint(Enum.TestEnum.Bar.EnumType) --\x3e TestEnum\n\nprint(Enum.TestEnum:GetEnumItems())\n')),(0,a.kt)("p",null,"This style of defining arguments is supported for compatability with\nEnumExtender."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local TestEnum = Enum.new(\n    "TestEnum",\n    {\n        [0] = Foo,\n        [1] = Bar,\n    }\n)\n')))}c.isMDXComponent=!0}}]);